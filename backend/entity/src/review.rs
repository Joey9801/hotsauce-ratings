//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "review")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub sauce: i32,
    pub user: i32,
    pub timestamp: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::User",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
    #[sea_orm(
        belongs_to = "super::sauce::Entity",
        from = "Column::Sauce",
        to = "super::sauce::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Sauce,
    #[sea_orm(has_many = "super::review_rating::Entity")]
    ReviewRating,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::sauce::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sauce.def()
    }
}

impl Related<super::review_rating::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReviewRating.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
